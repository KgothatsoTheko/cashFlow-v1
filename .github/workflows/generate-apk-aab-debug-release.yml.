name: Generate APK & AAB (Upload - Create Artifact To GitHub Action)

env:
  # The name of the main module repository
  main_project_module: app

  # The name of the Play Store or your app identifier
  playstore_name: Frogobox ID

on:
  push:
    branches:
      - 'release/**'  # Triggers on pushes to branches like release/v1, release/v2, etc.

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v3

      # Step 2: Set current date as an environment variable
      - name: Set current date as env variable
        run: echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # Step 3: Set repository name as an environment variable
      - name: Set repository name as env variable
        run: echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

      # Step 4: Set up JDK 17 using Zulu distribution and cache Gradle dependencies
      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'  # Options: 'temurin', 'zulu', etc.
          java-version: '17'
          cache: 'gradle'

      # Step 5: Make Gradle wrapper executable
      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      # Step 6: Run unit tests
      - name: Run gradle tests
        run: ./gradlew test

      # Step 7: Build the project
      - name: Build gradle project
        run: ./gradlew build

      # Step 8: Build Debug APK
      - name: Build apk debug project (APK) - ${{ env.main_project_module }} module
        run: ./gradlew assembleDebug

      # Step 9: Build Release APK
      - name: Build apk release project (APK) - ${{ env.main_project_module }} module
        run: ./gradlew assemble

      # Step 10: Build Release App Bundle (AAB)
      - name: Build app bundle release (AAB) - ${{ env.main_project_module }} module
        run: ./gradlew ${{ env.main_project_module }}:bundleRelease

      # Step 11: Upload Debug APK as an artifact
      - name: Upload APK Debug - ${{ env.repository_name }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.date_today }} - ${{ env.playstore_name }} - ${{ env.repository_name }} - APK(s) debug generated
          path: ${{ env.main_project_module }}/build/outputs/apk/debug/

      # Step 12: Upload Release APK as an artifact
      - name: Upload APK Release - ${{ env.repository_name }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.date_today }} - ${{ env.playstore_name }} - ${{ env.repository_name }} - APK(s) release generated
          path: ${{ env.main_project_module }}/build/outputs/apk/release/

      # Step 13: Upload Release AAB as an artifact
      - name: Upload AAB (App Bundle) Release - ${{ env.repository_name }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.date_today }} - ${{ env.playstore_name }} - ${{ env.repository_name }} - App bundle(s) AAB release generated
          path: ${{ env.main_project_module }}/build/outputs/bundle/release/
